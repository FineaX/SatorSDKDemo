// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name LmSDK
import Foundation
@_exported import LmSDK
import MBProgressHUD
import MJRefresh
import Photos
import SDWebImage
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class SAIStyle {
  public struct Colors {
    public static let primaryColor: UIKit.UIColor
    public static let secondaryColor: UIKit.UIColor
    public static let blackColor: UIKit.UIColor
    public static let clearColor: UIKit.UIColor
    public static let whiteColor: UIKit.UIColor
    public static let backgroundColor1: UIKit.UIColor
    public static let selectedColor1: UIKit.UIColor
    public static let sliderBgColor: UIKit.UIColor
    public static let brushColor: UIKit.UIColor
    public static let subToolViewBgColor: UIKit.UIColor
  }
  public struct hexColors {
  }
  public struct Fonts {
    public static let titleFont: UIKit.UIFont
    public static let bodyFont: UIKit.UIFont
    public static let captionFont: UIKit.UIFont
  }
  public struct Sizes {
    public static let cornerRadius: CoreFoundation.CGFloat
    public static let borderWidth: CoreFoundation.CGFloat
  }
  public struct Spacing {
    public static let small: CoreFoundation.CGFloat
    public static let medium: CoreFoundation.CGFloat
    public static let large: CoreFoundation.CGFloat
  }
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class SAIBaseNavigationController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
public struct SAIObjectWrapper<Base> {
  public let base: Base
  public init(_ base: Base)
}
public protocol SAIObjectCompatible : AnyObject {
}
public protocol SAIObjectCompatibleValue {
}
extension LmSDK.SAIObjectCompatible {
  public var sai: LmSDK.SAIObjectWrapper<Self> {
    get
    set
  }
  public static var sai: LmSDK.SAIObjectWrapper<Self>.Type {
    get
    set
  }
}
extension LmSDK.SAIObjectCompatibleValue {
  public var sai: LmSDK.SAIObjectWrapper<Self> {
    get
    set
  }
}
extension UIKit.UIViewController : LmSDK.SAIObjectCompatible {
}
extension UIKit.UIColor : LmSDK.SAIObjectCompatible {
}
extension UIKit.UIImage : LmSDK.SAIObjectCompatible {
}
extension CoreImage.CIImage : LmSDK.SAIObjectCompatible {
}
extension UIKit.UIFont : LmSDK.SAIObjectCompatible {
}
extension UIKit.UIView : LmSDK.SAIObjectCompatible {
}
extension UIKit.UIGraphicsImageRenderer : LmSDK.SAIObjectCompatible {
}
extension Swift.Array : LmSDK.SAIObjectCompatibleValue {
}
extension Swift.String : LmSDK.SAIObjectCompatibleValue {
}
extension CoreFoundation.CGFloat : LmSDK.SAIObjectCompatibleValue {
}
extension Swift.Bool : LmSDK.SAIObjectCompatibleValue {
}
extension Swift.Dictionary : LmSDK.SAIObjectCompatibleValue {
}
@_hasMissingDesignatedInitializers public class SAISDK {
  public static let shared: LmSDK.SAISDK
  public func setToken(_ token: Swift.String)
  public func getToken() -> Swift.String?
  public func performOperation(completion: (Swift.Result<Swift.String, any Swift.Error>) -> Swift.Void)
  public func start()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SSQTest : ObjectiveC.NSObject {
  public static func testAction()
  public static func testAction2()
  public static func testAction3()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SAIBaseViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SAIMaterialController : LmSDK.SAIBaseViewController, UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) public var sourceImage: UIKit.UIImage!
  @_Concurrency.MainActor(unsafe) public var copySourceImage: UIKit.UIImage!
  @objc @_Concurrency.MainActor(unsafe) public var mainScrollView: UIKit.UIScrollView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
